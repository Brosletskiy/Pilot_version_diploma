import { useEffect, useState, useRef } from 'react';
import "../shared/style/home.scss";
import { generateVideoWithHandAnimation } from "../shared/utils/generateVideoBMP";

export default function Home() {
    const [inputType, setInputType] = useState<'bmp' | null>(null);
    const [file, setFile] = useState<File | null>(null);
    const [rows, setRows] = useState(1);
    const [cols, setCols] = useState(1);
    const [selectedBlocks, setSelectedBlocks] = useState<string[]>([]);
    const [selectedDirection, setSelectedDirection] = useState<'top-bottom' | 'bottom-top' | 'left-right' | 'right-left'>("top-bottom");
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [videoUrl, setVideoUrl] = useState<string | null>(null);
    const [drawTime, setDrawTime] = useState<number | null>(null);
    const [deepSettings, setDeepSettings] = useState<boolean>(false);
    const prevDeepSettingsRef = useRef<boolean>(deepSettings);
    const [fps, setFPS] = useState(120);
    const [handImages, setHandImages] = useState<HTMLImageElement[]>([]);

    // Завантаження зображення руки один раз при монтуванні компонента
    useEffect(() => {
        const img = new Image();
        img.src = "./assets/hand-marker.svg"; // Задайте свій шлях до зображення руки
        img.onload = () => setHandImages([img]);
        console.log("BTN start disabled: ", isLoading, !file, handImages.length)
    }, []);

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = e.target.files?.[0];
        if (selectedFile && selectedFile.name.toLowerCase().endsWith('.bmp')) {
            setInputType('bmp');
            setFile(selectedFile);
        } else {
            setInputType(null);
            setFile(null);
        }
    };

    const toggleBlock = (id: string) => {
        setSelectedBlocks(prev =>
            prev.includes(id) ? prev.filter(b => b !== id) : [...prev, id]
        );
    };

    const handleCancel = () => {
        setInputType(null);
        setFile(null);
        setSelectedBlocks([]);
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
        setVideoUrl(null);
    };

    const handleStart = async () => {
        if (!inputType || !file) {
            alert("Оберіть BMP файл");
            return;
        }
        if (handImages.length === 0) {
            alert("Зображення руки не завантажене");
            return;
        }

        setIsLoading(true);
        setVideoUrl(null);
        const start = performance.now();

        try {
            const result = await generateVideoWithHandAnimation({
                inputType,
                bmpFile: file,
                handImages,
                selectedDirection,
                selectedBlocks,
                rows: rows ?? 1,
                cols: cols ?? 1,
                fps,
                onProgress: percent => console.log(`Прогрес: ${percent.toFixed(2)}%`)
            });
            setVideoUrl(result.videoUrl);
        } catch (error) {
            console.error("Помилка генерації відео:", error);
            alert("Сталася помилка під час генерації відео.");
        } finally {
            const end = performance.now();
            setDrawTime((end - start) / 1000);
            setIsLoading(false);
        }
    };

    useEffect(() => {
        // Скидаємо вибір блоків при зміні кількості рядків або стовпців
        setSelectedBlocks([]);
    }, [rows, cols]);

    useEffect(() => {
        if (prevDeepSettingsRef.current === true && !deepSettings) {
            setRows(1);
            setCols(1);
            setSelectedBlocks([]);
        }
        prevDeepSettingsRef.current = deepSettings;
    }, [deepSettings]);

    return (
        <div className="home-container">
            <header className='header'>
                {isLoading && <div className="loading-screen"><p>Генерація відео… Будь ласка, зачекайте ⏳</p></div>}

                {videoUrl && (
                    <div className="video-result">
                        <video src={videoUrl} controls autoPlay />
                        <a href={videoUrl} download="drawing.webm" className="btn-primary">Завантажити відео</a>
                        {drawTime && <p>Час малювання: {drawTime.toFixed(2)} с</p>}
                    </div>
                )}
            </header>
            <main className="content">
                <div className="content__input-panel">
                    <h2>Завантажте BMP файл</h2>
                    <div className='file-upload'>
                        <label htmlFor="bmp-upload" className="custom-file-upload">Обрати BMP файл</label>
                        <input id="bmp-upload" type="file" accept=".bmp" onChange={handleFileChange} ref={fileInputRef} style={{ display: 'none' }} />

                        {inputType === 'bmp' && file && (
                            <div className="image-grid-container">
                                <img src={URL.createObjectURL(file)} alt="BMP Preview" className="image-preview" />
                                {deepSettings && (
                                    <div className="grid-overlay">
                                        {[...Array(rows)].map((_, rowIdx) =>
                                            [...Array(cols)].map((_, colIdx) => {
                                                const id = `${rowIdx}-${colIdx}`;
                                                const isSelected = selectedBlocks.includes(id);
                                                return (
                                                    <div
                                                        key={id}
                                                        className={`grid-block ${isSelected ? 'selected' : ''}`}
                                                        onClick={() => toggleBlock(id)}
                                                        style={{
                                                            width: `${100 / cols}%`,
                                                            height: `${100 / rows}%`,
                                                            top: `${(100 / rows) * rowIdx}%`,
                                                            left: `${(100 / cols) * colIdx}%`,
                                                            position: 'absolute',
                                                            cursor: 'pointer',
                                                            userSelect: 'none'
                                                        }}
                                                        role="button"
                                                        aria-pressed={isSelected}
                                                        tabIndex={0}
                                                        onKeyDown={e => { if (e.key === 'Enter' || e.key === ' ') toggleBlock(id); }}
                                                    >
                                                        {isSelected && <span className="block-number">{selectedBlocks.indexOf(id) + 1}</span>}
                                                    </div>
                                                );
                                            })
                                        )}
                                    </div>
                                )}
                            </div>
                        )}
                        {inputType === 'bmp' && file && <p>Файл: {file.name}</p>}
                    </div>
                </div>

                {inputType === 'bmp' && file && (
                    <div className="content__settings-sidebar">
                        <h2>Налаштування</h2>
                        <div className='direction-wrapper'>
                            <span>Виберіть напрямок малювання</span>
                            <div className="direction-selector">
                                {['top-bottom', 'bottom-top', 'left-right', 'right-left'].map(dir => (
                                    <label key={dir} className="direction-item">
                                        <input
                                            type="radio"
                                            name="drawing-direction"
                                            value={dir}
                                            checked={selectedDirection === dir}
                                            onChange={() => setSelectedDirection(dir as any)}
                                        />
                                        <span className="arrow" data-dir={dir === 'top-bottom' ? '↓' : dir === 'bottom-top' ? '↑' : dir === 'left-right' ? '→' : '←'}>
                                            {dir === 'top-bottom' ? '↓' : dir === 'bottom-top' ? '↑' : dir === 'left-right' ? '→' : '←'}
                                        </span>
                                        {dir === 'top-bottom' ? 'Зверху вниз' :
                                            dir === 'bottom-top' ? 'Знизу вверх' :
                                                dir === 'left-right' ? 'Зліва направо' :
                                                    'Справа наліво'}
                                    </label>
                                ))}
                            </div>
                        </div>

                        <div className='direction-wrapper'>
                            <label>
                                <input
                                    type="checkbox"
                                    checked={deepSettings}
                                    onChange={(e) => setDeepSettings(e.target.checked)}
                                />
                                Розширені налаштування
                            </label>
                        </div>

                        {deepSettings && (
                            <>
                                <p>Сітка</p>
                                <div className='set-grid-wrapper'>
                                    <div className='setter'>
                                        <label>Кількість рядків:</label>
                                        <input
                                            type="number"
                                            min={1}
                                            value={rows}
                                            onChange={(e) => setRows(Math.max(1, Number(e.target.value)))}
                                        />
                                    </div>

                                    <div className='setter'>
                                        <label>Кількість стовпців:</label>
                                        <input
                                            type="number"
                                            min={1}
                                            value={cols}
                                            onChange={(e) => setCols(Math.max(1, Number(e.target.value)))}
                                        />
                                    </div>
                                </div>

                                <div className="video-settings">
                                    <p>Швидкість відео</p>
                                    <div className="fps-selector-row">
                                        <span className="fps-label">FPS:</span>
                                        <select
                                            className="custom-select"
                                            value={fps}
                                            onChange={(e) => setFPS(Number(e.target.value))}
                                        >
                                            {[30, 60, 120].map(f => (
                                                <option key={f} value={f}>{f}</option>
                                            ))}
                                        </select>
                                    </div>
                                </div>
                            </>
                        )}
                    </div>
                )}
            </main>
            <footer className='footer'>
                <button
                    type='button'
                    className='btn-secondary'
                    onClick={handleCancel}
                    disabled={isLoading}
                >
                    Cancel
                </button>
                <button
                    type='button'
                    className='btn-primary'
                    onClick={handleStart}
                    disabled={isLoading || !file}
                >
                    Start
                </button>
            </footer>
        </div>
    );
}
